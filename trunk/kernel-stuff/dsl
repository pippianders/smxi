#!/bin/bash
########################################################################
####  Script Name: dsl
####  Description: smxi archive kernel zip file constructor
####  version: 2.2.0
####  Date: February 25 2009
########################################################################
####  Copyright (C) Harald Hope 2007-2009
####
####  This program is free software; you can redistribute it and/or modify it under
####  the terms of the GNU General Public License as published by the Free Software
####  Foundation; either version 3 of the License, or (at your option) any later version.
####
####  This program is distributed in the hope that it will be useful, but WITHOUT
####  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
####  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
####
####  Get the full text of the GPL here: http://www.gnu.org/licenses/gpl.txt
########################################################################
#### DEFINE:
#### TRUE: -eq 0; == 'true'; function return 0
#### FALSE: -gt 0; == ''; function return > 0
########################################################################
#### VARIABLES
########################################################################

# layout
LINE='- - - - - - - - - - - - - - - - - - - - - - - - - - - - -'

# paths, change these to suite your needs
SVN_DIR="$HOME/bin/scripts/smxi/svn/trunk"
KERNEL_DIR="$HOME/large/kernel-zips"
KERNEL_SVN_DIR="$SVN_DIR/kernel-stuff/"
KERNEL_32_INSTALLER_DIR="$KERNEL_DIR/32-installer"
KERNEL_64_INSTALLER_DIR="$KERNEL_DIR/64-installer"

# script values
ALT_PATH=''
KERNEL_TYPE='sidux' # default to this
KERNEL_MAIN=''
KERNEL_WORKING=''
MIRROR_MAIN=''
MIRROR_MODULES=''
MIRROR_EXTRA=''
NEW_KERNEL_DIRECTORY=''

# boolean switches
B_EXP=''
B_REDO=''
B_SKIP_ZIP=''

########################################################################
#### FUNCTIONS
########################################################################

# args: $1 error nu; $2 - extra data
error_handler()
{
	local message=''

	case $1 in
		1)
			message='You should not be root to run this script'
			;;
		2)
			message="The directory: $2 does not exist, please fix this."
			;;
		3)
			message="You have to have a -k <kernel> to run this, it's not optional"
			;;
		4)
			message="wget download error when downloading: $2"
			;;
		5)
			message="The kernel you are trying to download: $2\ndoes not appear to exist, check your dsl arguments again to make sure they are correct"
			echo "Error in download data: Cleaning up bad directory name prior to exit..."
			rm -fR $NEW_KERNEL_DIRECTORY
			;;
		6)
			message="Missing required packaging file: $2"
			;;
		7)
			message="Corrupted kernel zip file: $2\nRemoved bad file."
			rm -f $2
			;;
		8)
			message="Startup error: $2"
			;;
		9)
			message="Unsupported startup option: $2"
			;;
		10)
			message="You can't run -r and -z together, they are mutually exclusive."
			;;
	esac
	echo $LINE
	echo -e $message
	echo "Error $1 - Exiting script, please correct the error"
	echo $LINE
	exit $1
}

get_options()
{
	local opt=''

	if [ -z "$1" ];then
		error_handler 8 'no arguments given'
	fi
	if [ -z "$( grep '^\-' <<< $1 )" ];then
		error_handler 8 "Option: $1 used but must start with a: -"
	fi

	while getopts :ehk:lrz opt
	do
		case $opt in
			e)	B_EXP='true'
				ALT_PATH='exp.'
				;;
			k)	KERNEL_WORKING=$OPTARG
				;;
			l)	KERNEL_TYPE='liquorix'
				;;
			r)	B_REDO='true'
				;;
			z)	B_SKIP_ZIP='true'
				;;
			h)
				echo "Useage:
-e Use exp.main data
-k Kernel to download. Requires -k <2.6.26-8.lqx.2 type syntax
   NOTE: -k <kernel> is required to run dsl always
-r Redo zip without downloading again.
-z Download only, no zip creation
"
				exit 0
				;;
			*)
				error_handler 9 "-$OPTARG"
				;;
		esac
	done

	if [ "$B_REDO" == 'true' -a "$B_SKIP_ZIP" == 'true' ];then
		error_handler 10
	fi
	if [ -z "$KERNEL_WORKING" ];then
		error_handler 3
	fi
}

set_values()
{
	local repoPre='' repoMain='' repoModules='' repoExtra=''

	case $KERNEL_TYPE in
		liquorix)
			repoPre="http://liquorix.net/debian/pool/${ALT_PATH}main/l/"
			repoMain='linux-liquorix-2.6/'
			repoModules='linux-modules-liquorix-main-2.6/'
			repoExtra=''
			;;
		sidux)
			repoPre="http://sidux.com/debian/pool/${ALT_PATH}main/l/"
			repoMain='linux-sidux-2.6/'
			repoModules='linux-modules-sidux-main-2.6/'
			repoExtra='linux-kbuild-2.6/'
			;;
	esac

	MIRROR_MAIN="$repoPre$repoMain"
	MIRROR_MODULES="$repoPre$repoModules"
	if [ -n "$repoExtra" ];then
		MIRROR_EXTRA="$repoPre$repoExtra"
	fi

	# set directory name
	NEW_KERNEL_DIRECTORY="$KERNEL_DIR/$KERNEL_WORKING"
	# then get the 2.6.28 slice
	KERNEL_MAIN=$( cut -d '-' -f 1 <<< $KERNEL_WORKING )
}

start_up_tests()
{
	local startDir=''

	echo $LINE
	echo "Running initial startup tests..."

	# don't want to use root for this script
	if [ "$(whoami)" == 'root' ];then
		error_handler 1
	fi

	# make sure the paths you made are right and exist
	for startDir in $KERNEL_DIR $KERNEL_32_INSTALLER_DIR $KERNEL_64_INSTALLER_DIR $SVN_DIR
	do
		if [ ! -d "$startDir" ];then
			error_handler 2 $startDir
		fi
	done

	if [ ! -f $KERNEL_32_INSTALLER_DIR/install-kernel-32.sh ];then
		error_handler 6 $KERNEL_32_INSTALLER_DIR/install-kernel-32.sh
	fi
	if [ ! -f $KERNEL_64_INSTALLER_DIR/install-kernel-64.sh ];then
		error_handler 6 $KERNEL_64_INSTALLER_DIR/install-kernel-64.sh
	fi

	echo "Start up tests: passed"
}

create_kernel_directory()
{
	echo $LINE
	echo "Starting kernel zip builder..."
	echo "Creating new $NEW_KERNEL_DIRECTORY directory..."

	if [ ! -d $NEW_KERNEL_DIRECTORY ];then
		mkdir $NEW_KERNEL_DIRECTORY
	fi
	cd $NEW_KERNEL_DIRECTORY
}

check_kernel_exists()
{
	local fileName='tempTesterDsl' kernelExists=''
	local kernelId=''

	case $KERNEL_TYPE in
		liquorix)
			kernelId="linux-image-$KERNEL_WORKING-liquorix-686"
			;;
		sidux)
			kernelId="linux-image-$KERNEL_WORKING-sidux-686"
			;;
	esac

	echo $LINE
	echo "Confirming that kernel $KERNEL_WORKING exists on server..."
	wget -O $fileName -q -e robots=off $MIRROR_MAIN

	kernelExists=$( grep -i "$kernelId" $fileName )
	rm -f $fileName
	if [ -z "$kernelExists" ];then
		error_handler 5 $KERNEL_WORKING
	else
		echo "Kernel appears to exist on remote server, continuing..."
	fi
}

download_kernel_files()
{
	local sleepTime=2

	echo $LINE
	echo "Starting grab of kernel packages now..."
	echo $LINE
	echo $LINE
	echo
	## download kernels and all related debs
	echo "Getting module debs now..."
	wget -r -l3 -Nc -nd -np -A.deb $MIRROR_MODULES -e robots=off || error_handler 3 $MIRROR_MODULES-deb
	echo $LINE
	echo $LINE
	echo
	sleep $sleepTime
	# grab source zips/debs for modules
	echo "Getting module tar.gz data now..."
	wget -r -l3 -Nc -nd -np -A.tar.gz $MIRROR_MODULES -e robots=off || error_handler 3 $MIRROR_MODULES-tar.gz
	echo $LINE
	echo $LINE
	echo
	sleep $sleepTime
	echo "Getting primary kernel debs now..."
	wget -r -l3 -Nc -nd -np -A.deb $MIRROR_MAIN -e robots=off || error_handler 3 $MIRROR_MAIN-deb
	echo $LINE
	echo $LINE
	echo
	sleep $sleepTime
	echo "Getting kernel diff.gz data now..."
	wget -r -l3 -Nc -nd -np -A.diff.gz $MIRROR_MAIN -e robots=off || error_handler 3 $MIRROR_MAIN-diff.gz
	echo $LINE
	echo $LINE
	echo
	sleep $sleepTime

	if [ -n "$MIRROR_EXTRA" ];then
		echo "Getting kbuild debs now..."
		wget -r -l3 -Nc -nd -np -A.deb $MIRROR_EXTRA -e robots=off || error_handler 3 $MIRROR_EXTRA
		echo $LINE
		echo $LINE
		echo
		sleep $sleepTime
		echo "Getting kbuild gx data now..."
		wget -r -l3 -Nc -nd -np -A.gz $MIRROR_EXTRA -e robots=off || error_handler 3 $MIRROR_EXTRA
		echo $LINE
		echo $LINE
		echo
		sleep $sleepTime
	fi
	echo "Done with kernel package data, continuing..."
}

create_sub_directories()
{
	local directories='32 32-meta 64 64-meta kernel-installer-files kernel-full-zips'
	local directory=''

	echo $LINE
	echo 'Generating 32/64 bit and meta directories...'
	for directory in $directories
	do
		if [ ! -d $directory ];then
			mkdir $directory
		fi
	done
}

move_files_to_directories()
{
	local kernelType=''

	case $KERNEL_TYPE in
		liquorix)
			kernelType='liquorix'
			;;
		sidux)
			kernelType='sidux'
			;;
	esac

	echo "Transferring files to directories..."
	mv -f *2.6-${kernelType}*i386.deb 32-meta
	mv -f *2.6-${kernelType}*amd64.deb 64-meta
	cp -f *${KERNEL_MAIN}*.gz 32
	mv -f *$KERNEL_MAIN*.gz 64
	cp -f *linux-support*.deb 32
	cp -f *linux-support*.deb 64
	mv -f *${KERNEL_MAIN}*i386.deb 32
	mv -f *${KERNEL_MAIN}*amd64.deb 64
	cp -f linux-patch-${kernelType}* 32
	cp -f linux-patch-${kernelType}* 64
	echo "Completed download and handling of $NEW_KERNEL_DIRECTORY."
}

add_update_installer_files()
{
	local fullKernelString32='' fullKernelString64=''

	case $KERNEL_TYPE in
		liquorix)
			fullKernelString32="$KERNEL_WORKING-liquorix-686"
			fullKernelString64="$KERNEL_WORKING-liquorix-amd64"
			;;
		sidux)
			fullKernelString32="$KERNEL_WORKING-sidux-686"
			fullKernelString64="$KERNEL_WORKING-sidux-amd64"
			;;
	esac

	echo $LINE
	echo 'Adding installer files and updating files...'
	cp $KERNEL_32_INSTALLER_DIR/install-kernel-32.sh 32/install-kernel.sh
	cp $KERNEL_64_INSTALLER_DIR/install-kernel-64.sh 64/install-kernel.sh

	sed -i 's/VER=\".*\"/VER=\"'$fullKernelString32'\"/' 32/install-kernel.sh
	sed -i 's/VER=\".*\"/VER=\"'$fullKernelString64'\"/' 64/install-kernel.sh
}

make_zip_files()
{
	local contents=''
	local kernel32Zip='' kernel64Zip=''

	case $KERNEL_TYPE in
		liquorix)
			kernel32Zip="$KERNEL_WORKING-liquorix-686.zip"
			kernel64Zip="$KERNEL_WORKING-liquorix-amd64.zip"
			;;
		sidux)
			kernel32Zip="$KERNEL_WORKING-sidux-686.zip"
			kernel64Zip="$KERNEL_WORKING-sidux-amd64.zip"
			;;
	esac

	echo $LINE
	echo 'Making 32 bit zip file now...'
	cd 32
	contents=$(ls)
	zip $kernel32Zip $contents
	echo 'Testing 32 bit kernel zip file for corruption...'
	unzip -t $kernel32Zip || error_handler 7 $kernel32Zip
	echo "32 bit kernel zip corruption test: passed"
	mv $kernel32Zip ../kernel-full-zips/

	echo 'Making 64 bit zip file now...'
	cd ../64
	contents=$(ls)
	zip $kernel64Zip $contents
	echo 'Testing 64 bit kernel zip file for corruption...'
	unzip -t $kernel64Zip || error_handler 7 $kernel64Zip
	echo '64 bit kernel zip corruption test: passed'
	mv $kernel64Zip ../kernel-full-zips/
}

clean_up()
{
	cd ../
	rm -f robots.txt
}

finish_it_up()
{
	echo $LINE
	echo 'OK, all finished. Remember to add new kernels to sm-lib-kernel global and upload the zips.'
}

########################################################################
#### EXECUTE
########################################################################

get_options "$@"
set_values

if [ "$B_REDO" == 'true' ];then
	#start_up_tests
	#check_kernel_exists
	create_kernel_directory
	#download_kernel_files
	create_sub_directories
	move_files_to_directories
	add_update_installer_files
	make_zip_files
	clean_up
	finish_it_up
elif [ "$B_SKIP_ZIP" == 'true' ];then
	start_up_tests
	check_kernel_exists
	create_kernel_directory
	download_kernel_files
	create_sub_directories
	#move_files_to_directories
	add_update_installer_files
	#make_zip_files
	clean_up
	finish_it_up
else
	start_up_tests
	check_kernel_exists
	create_kernel_directory
	download_kernel_files
	create_sub_directories
	move_files_to_directories
	add_update_installer_files
	make_zip_files
	clean_up
	finish_it_up
fi
exit 0
