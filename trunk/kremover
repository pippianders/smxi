#!/bin/bash	
########################################################################
####  Script Name: kremover
####  version: 1.0.0
####  Date: June 12 2008

####  Copyright (C) The sidux project
####  This program is free software; you can redistribute it and/or modify it under 
####  the terms of the GNU General Public License as published by the Free Software
####  Foundation; version 2 of the License.

####  This program is distributed in the hope that it will be useful, but WITHOUT 
####  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
####  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

####  Get the full text of the GPL here:
####  http://www.gnu.org/licenses/old-licenses/gpl-2.0.html

####  This script is a slightly modified version of the standard sidux kernel-remover
####  script. Date and numbering are only for internal use by smxi, and do not hold 
####  any other meaning.
########################################################################
#
# we need gettext (is loaded in ssft.sh or cloned...)
if [ -f /usr/bin/gettext.sh ]; then
	. /usr/bin/gettext.sh || exit 1
else
	exit 1
fi
#---------------------------------------------------------------------
# we need root rights
#---------------------------------------------------------------------
if [ "$(id -u)" -ne 0 ]; then
	if [ -x "$(which su-to-root)" ]; then
		[ -n "$DISPLAY" ] &&  exec su-to-root -X -c "${0} $@"
		exec su-to-root -c "${0} $@"
	fi
	printf "ERROR: $0 needs root capabilities, please start it as root.\n\n" >&2
	exit 1
fi

TEXTDOMAIN="kremover"
export TEXTDOMAIN
TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAINDIR

#---------------------------------------------------------------------
usage()
{
	echo  "$(basename $0)"
	echo  " -F parameteruse parameter as the graphical frontend"
	echo  "		 one of text | dialog | kdialog | zenity "
	echo  " -f	  do it withou asking anything"
	echo  " -h	  show this usage"
	exit 1
}
#---------------------------------------------------------------------
force=0
xtra=0
unset frontend
while getopts fhxF: name
do
case $name in
	f)  force=1;;
	F)  frontend="$OPTARG";;
	h)  usage;;
	x)  xtra=1;;
	*)  usage;;
esac
done
shift $(($OPTIND - 1))

#---------------------------------------------------------------------
prepare()
{
	if [ "$force" -eq 0 ]; then
		# we need ssft 
		if [ -f /usr/bin/ssft.sh ]; then
			. /usr/bin/ssft.sh || exit 1
		else
			 echo "Please install the package \"ssft\"."
			 exit 1
		fi
	fi

	if [ -n "${frontend}" ]; then
		case $frontend in
			text)  SSFT_FRONTEND="${frontend}";;
			dialog)  SSFT_FRONTEND="${frontend}";;
			kdialog)  SSFT_FRONTEND="${frontend}";;
			zenity) SSFT_FRONTEND="${frontend}";;
			*)  echo unknown frontend && exit 1;;
		esac
	fi

	if [ -z "$DISPLAY" ]; then
		[ -x /usr/bin/dialog ] && SSFT_FRONTEND=${SSFT_FRONTEND:-"dialog"} || \
			SSFT_FRONTEND=${SSFT_FRONTEND:-"text"}
	else
		if [ -n "$DISPLAY" ] && [ ! -x /usr/bin/zenity ]; then
			if [ -x /usr/bin/dialog ]; then
				SSFT_FRONTEND="dialog"
			else
				SSFT_FRONTEND="text"
			fi
			DISPLAY=""
		else
			SSFT_FRONTEND=${SSFT_FRONTEND:-"zenity"}
		fi
	fi

	# the current one will not be shown in the list ....

	ACTUAL=$(uname -r)
	TITLE="$(gettext "Removing installed kernels")"
	PAD1='~~~~~~~~'
	PAD2='~~~~~~~~~~~~~'

	[ "${SSFT_FRONTEND}" = "dialog" -o -z "${SSFT_FRONTEND}" ] && \
		CURRENT="$(eval_gettext "Your currently active kernel is: ${PAD1}$(uname -r)${PAD2}")" || \
		CURRENT="$(eval_gettext "Your currently active kernel is: $(uname -r)")"

}
#---------------------------------------------------------------------
# some useful functions
#---------------------------------------------------------------------
inputbox()
{
	# inputbox Title Text dummy default
	Title="$1"
	Text="$2"
	# $3 not used
	# The default value if used
	SSFT_DEFAULT=$4
	ssft_read_string "${Title}" "${Text}";
}

#---------------------------------------------------------------------
msgbox()
{
	# msgbox title text
	Title="$1"
	Text="$2"
	ssft_display_message "${Title}" "${Text}"
}
#---------------------------------------------------------------------
select_more()
{
	# select one of a list
	Title=$1
	Text=$2
	shift 2
	if ssft_select_multiple "$Title" "$Text" $@ ; then
		Selected=$SSFT_RESULT
		return 0
	else
		return 1 
	fi
}
#---------------------------------------------------------------------
yesno()
{
	# yesno title text width
	Title=$1
	Text=$2
	ssft_yesno "${Title}" "${Text}"
	return $?
}

#---------------------------------------------------------------------
remove_one_kernel()
{
	Kernel=$1 
	if [ "${Kernel}" != "${ACTUAL}" ]; then
		apt-get remove --purge --yes $(dpkg -l | awk "/${Kernel}/{print \$2}")

		dpkg -l "linux-headers-$(echo $Kernel | sed 's/\-sidux.*$//')-common" >/dev/null 2>&1 && \
			apt-get remove --purge --yes "linux-headers-$(echo $Kernel | sed 's/\-sidux.*$//')-common"
		dpkg -l "linux-support-$(echo $Kernel | sed 's/\-sidux.*$//')" >/dev/null 2>&1 && \
			apt-get remove --purge --yes "linux-support-$(echo $Kernel | sed 's/\-sidux.*$//')"

		# dispose make install artefacts
		if [ ! -e "/boot/vmlinuz-${Kernel}" ]; then
			rm -rf /lib/modules/${Kernel}
		fi
	else
		# do not remove active kernel
		:
	fi
}

#---------------------------------------------------------------------


get_KernelList()
{
	for v in /boot/vmlinuz-*; do 
		Kernel="$(basename $v | sed s/vmlinuz-//)"
		if [ "${Kernel}" != "${ACTUAL}" ]; then
			meta_package="$(echo $(grep-available \
				-F Depends linux-image-${Kernel} \
				-s Package) | cut -d: -f 2)"

			case $meta_package in
				*$Kernel* ) # this is an old style kernel
					KernelList="${KernelList} ${Kernel}"
					continue
					;;
			esac
			[ -n "${meta_package}" ] && \
				meta_status="$(dpkg-query  -f='${STATUS}\n' \
					-W  ${meta_package}|\
					cut -d ' ' -f 3)" || \
				meta_status="not-installed"

			if [ "${meta_status}" = "not-installed" ]; then
				[ -z "${KernelList}" ] && KernelList="${Kernel}" ||\
				KernelList="${KernelList} ${Kernel}"
				# echo KernelList="$KernelList"
			else
				:
			fi
		fi
	done
}

#---------------------------------------------------------------------
actualize_the_grub()
{
	[ -r /boot/grub/menu.lst -a -x /usr/sbin/update-grub ] && /usr/sbin/update-grub
}

#---------------------------------------------------------------------
# Main
#---------------------------------------------------------------------
if [ "${xtra}" -eq 1 ]; then
	KernelList="$@"
	for i in  ${KernelList} ; do
	removing="$(eval_gettext "removing kernel ${i}")"
	echo $removing
	remove_one_kernel "$i"
	done
	MSG="$(eval_gettext "the following kernels have been removed: \"${KernelList}\"")"
	echo $MSG
	actualize_the_grub
	exit 0
fi

prepare

get_KernelList

if [ -z "${KernelList}" ]; then
	MSG="$(gettext "There is only one kernel installed on this system. Nothing to be done!")"
	msgbox "${TITLE}" "${MSG}"
	exit 0
fi

if [ "${force}" -eq 1 ]; then
	current="$(eval_gettext "The currently active kernel is $(uname -r)")"
	echo ${current}
	for i in  ${KernelList} ; do
		removing="$(eval_gettext "removing kernel ${i}")"
		echo $removing
		remove_one_kernel "$i"
	done
	MSG="$(eval_gettext "the following kernels have been removed: \"${KernelList}\"")"
	echo $MSG
	actualize_the_grub
else
	select_more "${TITLE}" "${CURRENT}" ${KernelList} 
	if [ "$?" -ne 0 ]; then
		exit 10
	fi
	if [ -z "${SSFT_RESULT}" ]; then
		exit 12
	fi

	one_removed=false
	for i in ${SSFT_RESULT}; do
		MSG="$i : $(gettext "Should I remove this kernel?") "
		yesno "${TITLE}" "${MSG}"

		if [ "$?" -eq 0 ]; then
			remove_one_kernel "$i"
			one_removed=true
		else
			msgbox "${TiTLE}" "$(gettext "Kernel not removed:") $i"
		fi
	done
	if [ "$one_removed" = "true" ]; then
		actualize_the_grub
	fi
fi

exit 0

###**EOF**###