#!/bin/bash
########################################################################
####  Script Name: sm-lib-du-fixes
####  version: 1.0.4
####  Date: January 2 2008

####  Copyright (C) Harald Hope 2005-2008
####  The following functions use core logic by Joaquim Boura (x-un-i) and the sidux project:
####  msg_on msg_off list_modules remove_the_kernel
####  This program is free software; you can redistribute it and/or modify it under
####  the terms of the GNU General Public License as published by the Free Software
####  Foundation; either version 2 of the License, or (at your option) any later version.

####  This program is distributed in the hope that it will be useful, but WITHOUT
####  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
####  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

####  Get the full text of the GPL here:
####  http://www.gnu.org/licenses/old-licenses/gpl-2.0.html

####  Script Author: Harald Hope
####  This is a library file for smxi and cannot be run independently

####  Script URL: http://smxi.org/sm/sm-lib-du-fixes
####  Script SVN: http://code.google.com/p/smxi
####  Script Home page: http://techpatterns.com/forums/about736.html
########################################################################

########################################################################
####  FUNCTIONS
########################################################################

###---------------------------------------------------------------------
### du utilities
###---------------------------------------------------------------------

check_services()
{
	eval $LOGUS
	local rcconfFeature=0

	if [ -z "$( package_tester 'rcconf' )" ];then
		install_missing_apps 'rcconf' 'feature'
		rcconfFeature=$?
	fi
	if [ "$rcconfFeature" -eq 0 ];then
		rcconf
	fi
	eval $LOGUE
}

# arg: $1 - trap function name
du_trap_handler()
{
	# first echo is to clear the top line
	echo ''
	echo $WLINE
	echo "${W}You exited with ctrl+c or kill, removing holds if needed.${N}"
	set_hold_install install
	error_handler 'user-killed-du' "$1"
}

upgrade_package_remove_warning()
{
	eval $LOGUS
	local duInfo='' removedPackages='' removedPackageCount=''

	# if [ "$APT_TYPE" == 'apt-get' -a "$SYSTEM_BASE" == 'sid' ];then
	if [ "$SYSTEM_BASE" == 'sid' ];then
		# this runs apt-get dist-upgrade unseen on the terminal and answers "no"
		# to "do you want to continue" and stores it's output

		echo "${S}Checking ${C}$DU_UPGRADE${S} for packages to be removed...${N}"
		if [ "$APT_TYPE" == 'apt-get' ];then
			LC_ALL= LC_CTYPE= LC_MESSAGES= LANG= duInfo="$( $APT_TYPE $WITHOUT_RECOMMENDS --trivial-only $DU_UPGRADE 2> /dev/null )"
		elif [ "$APT_TYPE" == 'aptitude' ];then
			LC_ALL= LC_CTYPE= LC_MESSAGES= LANG= duInfo="$( echo 'n' | $APT_TYPE $WITHOUT_RECOMMENDS $DU_UPGRADE 2> /dev/null )"
		fi
		log_function_data "DU data:\n$duInfo\n"

		# check that there are 0 or some no. of packages 'to remove'.
		# This acts as a check to make sure there is > 0 to remove
		if [ "$APT_TYPE" == 'apt-get' ];then
			removedPackages=$(echo "$duInfo" | sed -n '/be REMOVED/,/following NEW/ p' | grep -v 'following ' )
		elif [ "$APT_TYPE" == 'aptitude' ];then
			removedPackages=$(echo "$duInfo" | sed -n '/be REMOVED:/,/following packages will be upgraded:/ p' | grep -v 'following ' )
		fi
		removedPackageCount=$( wc -w <<< $removedPackages )

		if [ "$removedPackageCount" -gt 0 ];then
			echo
			echo "${SPACER}${M}The following ${C}$removedPackageCount${M} packages will be removed in your ${C}$DU_UPGRADE${M}:"
			echo "${SPACER}${C}$removedPackages"
			echo "${SPACER}${M}This is not necessarily a problem.${S} In ${C}Debian Sid${S}, packages are often"
			echo "${SPACER}removed and replaced by other packages. But there are also times when updated"
			echo "${SPACER}packages can cause other needed and/or wanted packages to be removed."
			echo "${SPACER}This message simply alerts you that some packages will be removed.${N}"
		else
			echo "${S}No packages will be removed in your ${C}$APT_TYPE $DU_UPGRADE${S} today. Continuing...${N}"
		fi
		echo $LINE
	fi
	eval $LOGUE
}

###---------------------------------------------------------------------
### Main Dist-Upgrade stuff, pre-du, du, and post-du
###---------------------------------------------------------------------

pre_du_tasks()
{
	eval $LOGMS
	# begin update tasks
	apt_update_handler 'pre-du'

	echo $LINE
	echo "${S}Running assorted tasks to prepare for the system $DU_UPGRADE...${N}"
	if [ "$SYSTEM_BASE" != 'stable' -a "$SYSTEM_BASE" != 'etch' ];then
		set_hold_install hold

		# RUN FIRST CRITICAL FIXES. Must run before other fixes to avoid errors in apt
		# generally, these are fixes for kernels, core libs etc, that a new kernel might
		# make needed, like libncurses, libc6, and so on.
		if [ "$DISTRO_LEVEL" -lt 14 ];then
			libc6_fix_1 'pre-du' # ongoing fix, update as needed
		fi
		# load the 2007 fixes
		if [ "$DISTRO_LEVEL" -lt 10 ];then
			run_script_import $LIB_2007_FIXES
			run_2007_fixes 'pre'
		fi
	fi
	# set xorg version pre upgrade, either unset or like 6. or 7. etc
	test_xorg_version pre
	# load the 2008 fixes
	if [ "$DISTRO_LEVEL" -lt 14 ];then
		run_script_import $LIB_2008_FIXES
		run_2008_fixes 'pre'
	fi

	echo $LINE
	echo "${S}Finished with the pre-upgrade tasks.${N}"

	eval $LOGME
}

# main dist-upgrade/ update etc function
main_upgrade_engine()
{
	eval $LOGMS
	local prefId='du-connection-drop-1'
	local smPref=$( sm_pref_tester $prefId )
	local continue='' repeat='' options='' opt='' ConnectionDropped=''
	local exitStatus=$2 # only for script re-runs, $2 not set first time
	local metaExists=$( package_tester 'linux-image-2.6-(sidux-|)' 'wild-full' )
	local currentAptKernelGrub=$( grep -i -o -m1 "$CURRENT_APT_KERNEL" $GRUB_PATH )
	local exitNo='' rebootNo='' rebootText='' rebootTopText=''
	local options="use-install-f $DU_UPGRADE-again check-services continue "

	# set the trap here
	trap 'du_trap_handler $FUNCNAME' INT TERM

	options="$options exit"
	exitNo=$( echo $options | wc -w )
	# this prints one time, until the first full du is done, will be updated to be more useful.
	# obsolete, but I'll keep it in case I need to flash some version specific du message.
	if [ "$smPref" -eq 0 ];then
		if [ "$DISTRO_LEVEL" -lt 2 ];then
			ConnectionDropped='echo -e "${W}After your $DU_UPGRADE you may lose your network connection.${S}\nIf this happens some parts of the script will not work. To fix this,\nsimply restart the script, and it will restart your connection for you\nif there is no connection present.\n$LINE"'
		fi
	fi

	# only do this part the first time the function runs
	if [ "$1" == "first" ];then
		# run an assortment of pre du stuff, update scripts, keyrings, fixes, etc
		pre_du_tasks
		echo $MBAR
		echo "${M}MAIN $( tr '[a-z]' '[A-Z]' <<< $DU_UPGRADE) HANDLER"
		# print_lib_info "$LIB_DU_FIXES"
		echo $MLINE
		eval $ConnectionDropped
		# note: because the file may not be current or loaded, do not run this if if no warning
		if [ "$SKIP_WARNING" != 'true' ];then
			get_configs # print out any keep config stuff
		fi
		upgrade_package_remove_warning
		echo "${S}You are now ready to begin your ${C}$DU_UPGRADE${S}. Make sure that it goes all the"
		echo "through without errors, and of course, always check for packages to be removed."

		# small cosmetic, to avoid printing double line with print-hec
		if [ "$SKIP_ENTER" == 'true' ];then
			echo $LINE
		fi
		print_hec

		$APT_TYPE $WITHOUT_RECOMMENDS $DU_UPGRADE 2>>$LOG_FILE 2>&1
		exitStatus=${PIPESTATUS[0]}
		apt_error_handling du-1 $exitStatus
	fi

	if [ "$exitStatus" -eq 0 ];then
		echo $MLINE
		echo "${M}Your $DU_UPGRADE appears to have completed with no errors."
		echo "${S}You can continue on safely to do the rest of the script now."
		echo
		echo "It does not hurt to run ${C}$DU_UPGRADE-again${S} [option ${C}2${S}] once after a"
		echo "successful $DU_UPGRADE just to make sure things are fine though."
	else
		echo $EBAR
		echo "${E}Your $DU_UPGRADE is reporting errors!"
		echo $EBAR
		echo "${S}Please make sure to do the following to correct the errors reported:"
		echo "${C}$APT_TYPE install -f ${S}[option ${C}1${S}] - Use this first if you got errors!"
		echo
		echo "Run the ${C}$DU_UPGRADE-again${S} [option ${C}2${S}] to make sure the $DU_UPGRADE completes."
		echo "If errors do not get resolved, you'll need to get help from sidux irc or the forums."
		echo
		echo "${M}NOTE: Please run ${C}1${M} and ${C}2${M} as many times as necessary to get rid of the errors."
		echo "${S}Make sure to write down the package error in the $DU_UPGRADE messages."
		echo
		echo "Once you are sure the upgrade is done, you can continue, check services, or exit."
	fi

	# if current kernel was not in grub prior to du, and is in grub post du
	# metapackage users need this alert because otherwise they might not even
	# realize a new kernel installed. Regular kernel users of course don't need
	# to see this information since they know they installed one, and the post kernel
	# install step gives them all the information they need.
	if [ "$currentAptKernelGrub" != "$CURRENT_APT_KERNEL_GRUB" -a -n "$metaExists" -a -n "$currentAptKernelGrub" ];then
		options="$options reboot"
		rebootNo=$( echo $options | wc -w )
		rebootTopText='echo -e "${M}You are using ${C}kernel metapackages${M} and your ${C}$DU_UPGRADE${M} installed a new kernel.\nYour new ${C}$CURRENT_APT_KERNEL${M} kernel will not become active until you reboot.\n$MLINE"'
		rebootText='echo -e "${C}$rebootNo - reboot${M} Reboot into your new ${C}$CURRENT_APT_KERNEL${M} kernel."'
		KERNEL_INSTALL_TO=$CURRENT_APT_KERNEL
	fi
	log_function_data "currentAptKernelGrub: $currentAptKernelGrub"
	log_function_data "CURRENT_APT_KERNEL_GRUB: $CURRENT_APT_KERNEL_GRUB"
	log_function_data "metaExists: $metaExists"
	log_function_data "KERNEL_INSTALL_TO: $KERNEL_INSTALL_TO"

	echo $MLINE
	nonfree_driver_reinstall 'kernel-xorg'
	eval "$rebootTopText"
	echo "${C}1 - use-install-f${S} Use this to try to resolve error in $DU_UPGRADE."
	echo "${C}2 - $DU_UPGRADE-again${S} Run this after correcting an error with ${C}1${S}."
	echo
	echo "${C}3 - check-services${S} Runs ${C}rcconf${S} to let you turn back off any services that might "
	echo "    have been turned on during the ${C}$DU_UPGRADE${S} (more options in the future)."
	echo
	echo "${C}4 - continue${S} Continue on with script, do this when $DU_UPGRADE is successful."
	eval "$rebootText"

	echo "${C}$exitNo - quit${S} If you need to fix error, you can exit here. In general, please"
	echo "    do not exit unless you need to. The script often runs post $DU_UPGRADE fixes"
	echo "    when you use ${C}continue${S}, and if you exit here, they will not run."
	echo $LINE
	echo -e $SLE
	echo $LINE

	select opt in $options
	do
		eval $LOGME
		case $opt in
			use-install-f)
				$APT_TYPE install $WITHOUT_RECOMMENDS -f 2>>$LOG_FILE 2>&1
				exitStatus=${PIPESTATUS[0]}
				apt_error_handling du-f $exitStatus
				# we will repeat this over and over until it's definitely done
				repeat='true'
				;;
			$DU_UPGRADE-again)
				$APT_TYPE $WITHOUT_RECOMMENDS $DU_UPGRADE 2>>$LOG_FILE 2>&1
				exitStatus=${PIPESTATUS[0]}
				apt_error_handling du-2 $exitStatus
				repeat='true' # reset so no log if no error
				;;
			check-services)
				check_services
				repeat='true'
				;;
			continue)
				# set some prefs for successful du
				if [ "$smPref" -eq 0 ];then
					set_sticky_prefs $prefId
				fi
				set_sticky_prefs d
				echo "${S}Ok, you are ready to go on now.${N}"
				continue='true'
				;;
			reboot)
				set_hold_install install # in case of reboot, make sure to lift hold
				run_script_import $LIB_KERNEL_INSTALL
				reboot_now_question $CURRENT_APT_KERNEL
				;;
			exit)
				set_hold_install install # in case of exit, make sure to lift hold
				print_quit
				;;
			*)
				print_error opt
				repeat='true'
				;;
		esac
		break
	done
	trap - INT TERM
	# run du cleanup etc tasks once user decides to continue, note that
	# script uses the error numbers to determine which message to display on repeat

	if [ "$repeat" == 'true' ];then
		main_upgrade_engine repeat $exitStatus
	elif [ "$continue" == 'true' ];then
		post_du_tasks
	fi
}


## DEBUGGER
#script_debugger 'main_upgrade_engine repeat 1'

# cleanup and set various tweaks post du
# this will only run if user enters the 'continue' option to avoid looping errors
post_du_tasks()
{
	eval $LOGMS
	# set the trap here
	if [ "$SYSTEM_BASE" != 'stable' -a "$SYSTEM_BASE" != 'etch' ];then
		trap 'du_trap_handler $FUNCNAME' INT TERM

		# this is all just debian conversion stuff
		if [ "$CON_DEB" == 'true' ];then
			run_script_import $LIB_DISTRO_CONVERSION
			install_window_manager
			install_sidux_components # test to make sure all sidux stuff is installed
			sidux_graphics grub1
		fi

		# load the 2007 fixes
		if [ "$DISTRO_LEVEL" -lt 10 ];then
			run_2007_fixes 'post'
		fi
		# load the 2008 fixes
		if [ "$DISTRO_LEVEL" -lt 14 ];then
			run_2008_fixes 'post'
		fi
		trap - INT TERM
		## take the package(s) off hold if they were set
		set_hold_install install
	fi
	eval $LOGME
}

###---------------------------------------------------------------------
### permanent du fixes
###---------------------------------------------------------------------

# this is a permanent fix, since the libc6 stuff mismatches so often
# args: $1 - pre-du or kernel
libc6_fix_1()
{
	eval $LOGUS
	#local libc6Version=$( apt-cache policy libc6 | grep -m 2 ':' | egrep '2\.[0-4]' )
	# for general users I'll update this if needed now and then, but mostly this is
	# for kernel installs, to avoid the du failure after new kernel
	local prefId='libc6-fix-4'
	local smPref=$( sm_pref_tester $prefId )
	local kernelMessage=' with your new kernel'
	if [ "$1" == 'pre-du' ];then
		kernelMessage=" before you $DU_UPGRADE"
	fi

 	if [ "$smPref" -eq 0 -o "$1" == 'kernel' ];then
		echo $LINE
		echo "${S}Updating ${C}libc6${S} packages to make sure your system will work right$kernelMessage...${N}"
		#echo
		#echo "${M}If ${C}tzdata${M} won't let you pick your right time zone, don't worry,"
		#echo "just select any city if this happens, then the script will let you reconfigure"
		#echo "it after your ${C}$DU_UPGRADE${M} is done. This works fine.${N}"
		package_installer 'libc6 libc6-dev tzdata locales util-linux' 'force-always'
		# let's only set this if needed
 		if [ "$smPref" -eq 0 ];then
 			set_sticky_prefs $prefId
 		fi
 	fi
 	eval $LOGUE
 	# I'm putting this in here to make sure it has fired at least once pre kernel install
 	busybox_fix_1
}

busybox_fix_1()
{
	eval $LOGUS
	local prefId='busybox-fix-1'
	local smPref=$( sm_pref_tester $prefId )

	if [ "$smPref" -eq 0 ];then
		echo $LINE
		echo "${S}Running ${C}busybox${S} fix to fix a major bug...${N}"
		package_installer 'busybox' 'install-always'
		set_sticky_prefs $prefId
	fi
	eval $LOGUE
}

nvidia_sse_alert()
{
	eval $LOGUS
	local isSse=$( grep -io 'sse' /proc/cpuinfo )
	# for some reason using \s* fails randomly for space test
	# local isNvidia=$( egrep -io 'Driver.*"nvidia"' $X_ORG_PATH | cut -d '"' -f 2  )
	# I'm going to test for nvidia alone in the lspci output in case they are running nv
	 local isNvidia=$( lspci | grep 'VGA' | grep -i 'nvidia' )

	if [ -z "$isSse" -a -n "$isNvidia" ];then
		echo $MLINE
		echo "${M}ALERT: In the latest ${C}nVidia${M} ${C}169.xx${M} and greater drivers, "
		echo "${C}OpenGL${M} requires ${C}CPUs with SSE${M} to run."
		echo
		echo "${W}Your${C}$CPU_NAME${W} does ${C}NOT${W} support ${C}SSE."
		echo $MLINE
		echo "${S}What does this mean? It means with new drivers you will not have 3d support."
		echo "The 100 series drivers do work, but cannot be installed on 2.6.28 kernels."
		echo
		echo "${S}Only drivers of series ${C}169/96/71${S} or newer work on ${C}2.6.26${S} and later kernels."
		echo "For now, this leaves you with only these choices:"
		echo "${C}1 - ${S}Stay with the latest ${C}2.6.27${S} kernel and use the ${C}100.xx${S} drivers."
		echo "    You must install these drivers directly with sgfxi, like this: ${C}sgfxi -co 100.14.19"
		echo "${C}2 - ${S}Forget about 3d and just use the 2d part of the driver, or run the legacy ${C}7xxx${S} drivers."
		echo "${C}3 - ${S}Use the ${C}xorg nv${S} drivers instead, which aren't very good."
		echo "${C}4 - ${S}Get an old used ${C}ATI 7/8/9xxx${S} card that has fine working ${C}xorg drivers."
		echo
		echo "${S}Please check the ${C}sidux.com${S} forums, hardware section, for more information on this.${N}"
		log_function_data "Is sse cpu and nvidia system."
		print_hec
	fi
	eval $LOGUE
}
# nvidia_sse_alert
###---------------------------------------------------------------------
### various du fixes
### NOTE: these fixes are contined in sm-lib-20xx-fixes files
###---------------------------------------------------------------------

# HANDLED BY EXTERNAL LIBRARY FILES sm-lib-20xx-fixes

###---------------------------------------------------------------------
###
###---------------------------------------------------------------------

###---------------------------------------------------------------------
###
###---------------------------------------------------------------------


###**EOF**###
